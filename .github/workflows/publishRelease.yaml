name: Triggered by Version Bump merged

#disable all tags and enable all brannches and only version file
on:
  push:
    branches-ignore:
      - update-rc-version
      - update-version
    paths:
      - version.txt

jobs:
  infos:
    name: infos
    runs-on: ubuntu-latest
    outputs:
      isVersionBump: ${{ steps.extractInfos.outputs.isVersionBump }}
      isPreRelease: ${{ steps.extractInfos.outputs.isPreRelease }}
      VERSIONTAG: ${{ steps.extractInfos.outputs.VERSIONTAG }}
    steps:
      - name: Echo infos
        run: echo '${{toJSON(github)}}'

      - name: Extract needed infos
        id: extractInfos
        run: |
          printf "${{github.event.head_commit.message}}" > temp.txt

          if [[ $(grep -oP "\[v\d+.\d+.\d+rc\d+\]" temp.txt) ||   $(grep -oP "\[v\d+.\d+.\d+\]" temp.txt) ]]; then
            echo ::set-output\ name=isVersionBump::true
            
            if [[ $(grep -oP "\[v\d+.\d+.\d+rc\d+\]" temp.txt) ]] ; then
              echo ::set-output\ name=isPreRelease::true
              versionTag=$(grep -oP "v\d+.\d+.\d+rc\d+" temp.txt)
            else
              echo ::set-output\ name=isPreRelease::false
              versionTag=$(grep -oP "v\d+.\d+.\d+" temp.txt)
            fi
            echo ::set-output\ name=VERSIONTAG::$versionTag
          fi

  dummytest:
    name: Dummy Job for Tests
    runs-on: ubuntu-latest
    needs: infos
    steps:
      - run: echo "Doing tests here"   

  dummybuild:
    name: Dummy Job for Packaging
    needs: dummytest
    runs-on: ubuntu-latest
    steps:
      - run: echo "Doing BuildPackages here"   

  createRelease:
    name: Create Release
    needs: [infos,dummybuild]
    if: needs.infos.outputs.isVersionBump == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: PreRelease
        uses: softprops/action-gh-release@v1
        if: needs.infos.outputs.isPreRelease == 'true'
        with:
          tag_name: ${{ needs.infos.outputs.VERSIONTAG }}
          prerelease: true
          generate_release_notes: true
          body: "Custom Body Text that will be prepended to the automatically generated one [${{ needs.infos.outputs.VERSIONTAG }}] "
          target_commitish: ${{github.event.ref}}
          name: "PreRelease for [${{ needs.infos.outputs.VERSIONTAG }}]"
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          token: ${{ secrets.NEOBOT_PR_PAT }}

      - name: Release
        uses: softprops/action-gh-release@v1
        if: needs.infos.outputs.isPreRelease == 'false'
        with:
          tag_name: ${{ needs.infos.outputs.VERSIONTAG }}
          prerelease: false
          generate_release_notes: true
          body: "Custom Body Text that will be prepended to the automatically generated one [${{ needs.infos.outputs.VERSIONTAG }}] "
          target_commitish: ${{github.event.ref}}
          name: "Release for [${{ needs.infos.outputs.VERSIONTAG }}]"
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          token: ${{ secrets.NEOBOT_PR_PAT }}

  dummyPublish:
    name: Dummy Job for Publishing
    runs-on: ubuntu-latest
    needs: createRelease
    steps:
      - run: echo "Doing Publishing here"